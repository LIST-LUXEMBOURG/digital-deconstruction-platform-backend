/*
 *   Copyright (c) 2022 Luxembourg Institute of Science and Technology
 *   All rights reserved.
 *   For licensing information see the "LICENSE" file in the root directory
 */
import { ApiProperty } from '@nestjs/swagger';
import { Project } from '../../../project/entities';
import {
    Entity,
    Column,
    JoinColumn,
    ManyToOne,
    PrimaryGeneratedColumn,
} from 'typeorm';

import { Element } from './element.entity';
import { MaterialType } from './material-type.entity';
import { InventoryMaterialDto } from '../dto/inventory-material.dto';

@Entity()
export class Material {
    @PrimaryGeneratedColumn('uuid')
    uid: string; // string | generated by platform | automatic | ignored

    @ApiProperty({
        required: true,
        type: () => Project,
        description: "The project this material is part of",
    })

    @ManyToOne(
        (type) => Project,
        {
            onDelete: "CASCADE",
        }
    )
    @JoinColumn()
    project: Project;

    @ApiProperty({
        required: false,
        type: Number,
        description: "The volume of this material expressed in m3 (cubic meters)",
        example: 0.65
    })
    @Column({ type: 'numeric', nullable: true })
    volume: number; // float | provided by GTB-Lab   | automatic | optional

    @ApiProperty({
        required: false,
        type: Number,
        description: "The total mass (or weight) of this material expressed in t (metric tons)",
        example: 0.25
    })
    @Column({ type: 'numeric', nullable: true })
    mass: number; // float | provided by GTB-Lab   | automatic | optional

    @ApiProperty({
        type: MaterialType,
        required: true,
        description: 'The material type of this material',

    })
    @ManyToOne(() => MaterialType, {
        cascade: true,
        onDelete: 'NO ACTION',
    })
    @JoinColumn()
    materialType: MaterialType;

    @ManyToOne(() => Element, (element) => element.materials, {
        onDelete: 'CASCADE',
    })
    @JoinColumn()
    element: Element;

    //----------------------------------------------------------------------- 

    static toDto(material: Material): InventoryMaterialDto {
        let dto = new InventoryMaterialDto();

        if (!!material) {
            let { project, materialType, element, ...fields } = material;

            dto = Object.assign(dto, { ...fields });

            if (!!project) {
                dto.projectId = project.id;
            }

            if (!!materialType) {
                dto.materialTypeUid = materialType.uid;
            }
        }
        return dto;
    }
}
