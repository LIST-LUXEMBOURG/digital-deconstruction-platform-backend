/*
 *   Copyright (c) 2022 Luxembourg Institute of Science and Technology
 *   All rights reserved.
 *   For licensing information see the "LICENSE" file in the root directory
 */

import { ApiProperty } from '@nestjs/swagger';
import { Project } from '../../../project/entities';
import {
    Entity,
    Column,
    OneToMany,
    PrimaryGeneratedColumn,
    Unique,
    ManyToOne,
    JoinColumn,
    OneToOne,
} from 'typeorm';
import { InventoryMaterialTypeDto } from '../dto/inventory-matertial-type.dto';
import { Circularity } from '../../../circularity/entities/circularity.entity';

@Entity()
@Unique('unique_materialtype_name_project', ['name', 'project'])
export class MaterialType {
    @PrimaryGeneratedColumn('uuid')
    uid: string; // string | generated by platform | automatic | ignored

    @ApiProperty({
        required: true,
        type: () => Project,
        description: "The project this material type is part of",
    })
    @ManyToOne(
        (type) => Project,
        {
            onDelete: "CASCADE",
        }
    )
    @JoinColumn()
    project: Project;

    @ApiProperty({
        required: true,
        type: String,
        description: "The given name of the material type",
        example: "Steel Beam (I Type)"
    })
    @Column({ type: String, nullable: false })
    name: string; //  provided by GTB-Lab/BIM-Y | automatic | required

    @ApiProperty({
        required: false,
        type: String,
        description: "The description of the material type",
        example: "Structural steel beam designed to play a key role as a support member in structures."
    })
    @Column({ type: String, nullable: true })
    description: string; //  provided by GTB-Lab/BIM-Y | automatic | optional

    @ApiProperty({
        required: true,
        type: String,
        description: "The category of the material type",
        example: "Structural Element"
    })
    @Column({ type: String, nullable: false })
    category: string; //  provided by GTB-Lab/BIM-Y | automatic | required

    @ApiProperty({
        required: false,
        type: Boolean,
        default: false,
        description: "Specifies whether this material represents a hazard (health and/or environmental)",
        example: true
    })
    @Column({ type: Boolean, nullable: true, default: false })
    isHazard: boolean; // provided by users | manual | optional

    @OneToOne(() => Circularity, (circ) => circ.materialType, {
        cascade: true,
        onDelete: 'SET NULL',
        onUpdate: 'CASCADE',
    })
    circularity: Circularity;

    //----------------------------------------------------------------------- 

    static toDto(materialType: MaterialType): InventoryMaterialTypeDto {
        let dto = new InventoryMaterialTypeDto();

        if (!!materialType) {
            let { project, circularity, ...fields } = materialType;

            dto = Object.assign(dto, { ...fields });

            if (!!project) {
                dto.projectId = project.id;
            }

            if (!!circularity) {
                dto.circularity = Circularity.toDto(circularity);
            }
        }
        return dto;
    }
}
